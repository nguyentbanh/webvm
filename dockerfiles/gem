# Use the standard 64-bit (amd64) Debian image as the base.
FROM debian:buster

ARG DEBIAN_FRONTEND=noninteractive

# 1. Add i386 architecture and, most importantly, update sources.list to point to the Debian archive.
#    This is necessary because Buster is an old release and its repositories have moved.
#    [trusted=yes] is used to avoid potential GPG key issues with the archive.
RUN dpkg --add-architecture i386 && \
    echo "deb [trusted=yes] http://archive.debian.org/debian/ buster main" > /etc/apt/sources.list && \
    echo "deb [trusted=yes] http://archive.debian.org/debian-security buster/updates main" >> /etc/apt/sources.list && \
    echo "deb [trusted=yes] http://archive.debian.org/debian/ buster-updates main" >> /etc/apt/sources.list

# 2. Run a single layer to update, install tools, and add the NodeSource repository.
#    This is more efficient and avoids potential caching issues.
RUN apt-get update && \
    apt-get install -y curl gnupg apt-transport-https && \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x buster main" > /etc/apt/sources.list.d/nodesource.list && \
    # Update again to fetch the new Node.js package list
    apt-get update

# 3. Install all packages.
#    - nodejs will be installed from the amd64-only NodeSource repo.
#    - All of your original packages are explicitly installed for the i386 architecture.
RUN apt-get -y install \
    nodejs \
    apt-utils:i386 gcc:i386 \
	python3:i386 vim:i386 unzip:i386 ruby:i386 \
	fakeroot:i386 dbus:i386 base:i386 whiptail:i386 hexedit:i386 \
	patch:i386 wamerican:i386 ucf:i386 manpages:i386 \
	file:i386 luajit:i386 make:i386 lua50:i386 dialog:i386 \
	less:i386 cowsay:i386 netcat-openbsd:i386

# 4. Install the Gemini CLI globally using the 64-bit npm
RUN npm install -g @google/gemini-cli

# --- The rest of your Dockerfile remains the same ---
RUN useradd -m user && echo "user:password" | chpasswd
COPY --chown=user:user ./examples /home/user/examples
RUN chmod -R +x  /home/user/examples/lua
WORKDIR /home/user/
ENV HOME="/home/user" TERM="xterm" USER="user" SHELL="/bin/bash" EDITOR="vim" LANG="en_US.UTF-8" LC_ALL="C"
RUN echo 'root:password' | chpasswd
CMD [ "/bin/bash" ]
