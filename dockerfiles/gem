############################
# Stage 0 : build Node 22  #
############################
FROM i386/debian:bullseye AS node-build
ARG NODE_VERSION=22.2.0

# refresh keyring + install build tools + build Node — all in ONE layer
RUN set -e \
 && apt-get update -o Acquire::AllowReleaseInfoChange=yes \
 && apt-get install -y debian-archive-keyring ca-certificates \
                       build-essential python3 curl git \
                       pkg-config libssl-dev xz-utils \
 && curl -fsSL https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.tar.xz \
      -o /tmp/node.tar.xz \
 && tar -C /tmp -xf /tmp/node.tar.xz \
 && cd /tmp/node-v${NODE_VERSION} \
 && ./configure --prefix=/usr/local --dest-cpu=ia32 \
 && make -j"$(nproc)" \
 && make install \
 && rm -rf /var/lib/apt/lists/* /tmp/*

############################
# Stage 1 : runtime image  #
############################
FROM i386/debian:bullseye-slim

# Same key-refresh trick for the runtime layer
RUN apt-get update -o Acquire::AllowReleaseInfoChange=yes \
 && apt-get install -y debian-archive-keyring ca-certificates

# Bring node + npm from the builder
COPY --from=node-build /usr/local /usr/local

# Whatever extra packages you still need
RUN apt-get update && apt-get install -y \
      vim git curl ruby less … \
 && rm -rf /var/lib/apt/lists/*

# Gemini CLI
RUN npm install -g @google/gemini-cli

# -----------------------------------------------------------------
# 3.  The rest of your original Dockerfile
# -----------------------------------------------------------------
RUN useradd -m user && echo "user:password" | chpasswd
COPY --chown=user:user ./examples /home/user/examples
RUN chmod -R +x /home/user/examples/lua

WORKDIR /home/user/
ENV HOME="/home/user" TERM="xterm" USER="user" SHELL="/bin/bash" \
    EDITOR="vim" LANG="en_US.UTF-8" LC_ALL="C"

RUN echo 'root:password' | chpasswd
CMD ["/bin/bash"]
